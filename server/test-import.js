import fs from 'fs';
import FormData from 'form-data';
import fetch from 'node-fetch';

async function testImport() {
  console.log('üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–ª–æ–≥–æ CSV...');
  
  try {
    const form = new FormData();
    const fileStream = fs.createReadStream('./test-small.csv');
    form.append('csvFile', fileStream, 'test-small.csv');

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    const response = await fetch('http://localhost:3001/api/works/import', {
      method: 'POST',
      body: form
    });

    const result = await response.json();
    console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log('‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!');
      console.log(`üìä –°–æ–∑–¥–∞–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è: 
        - –§–∞–∑—ã: ${result.hierarchy.phases}
        - –°—Ç–∞–¥–∏–∏: ${result.hierarchy.stages} 
        - –ü–æ–¥—Å—Ç–∞–¥–∏–∏: ${result.hierarchy.substages}
        - –†–∞–±–æ—Ç—ã: ${result.hierarchy.works}`);
    } else {
      console.log('‚ùå –¢–ï–°–¢ –ù–ï–£–î–ê–ß–ï–ù:', result.error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testImport();
import { query } from './database.js';
import fs from 'fs';
import path from 'path';

async function importCSV() {
  try {
    console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV...');

    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvPath = path.join(process.cwd(), 'works_ref_export.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf8');
    const lines = csvContent.split('\n').filter(line => line.trim());
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lines.length - 1} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const dataLines = lines.slice(1);
    
    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
    const phases = new Map();
    const stages = new Map();
    const substages = new Map();
    const works = [];

    for (const line of dataLines) {
      if (!line.trim()) continue;
      
      const [work_id, work_name, unit, unit_price, phase_id, phase_name, stage_id, stage_name, substage_id, substage_name] = 
        line.split(';');
      
      // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–∑—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
      if (phase_id && phase_id.trim() && phase_name && phase_name.trim()) {
        phases.set(phase_id.trim(), phase_name.trim());
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞–¥–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
      if (stage_id && stage_id.trim() && stage_name && stage_name.trim()) {
        stages.set(stage_id.trim(), { 
          name: stage_name.trim(), 
          phase_id: (phase_id && phase_id.trim()) ? phase_id.trim() : null 
        });
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Å—Ç–∞–¥–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
      if (substage_id && substage_id.trim() && substage_name && substage_name.trim()) {
        substages.set(substage_id.trim(), { 
          name: substage_name.trim(), 
          stage_id: (stage_id && stage_id.trim()) ? stage_id.trim() : null 
        });
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
      if (work_id && work_id.trim() && work_name && work_name.trim()) {
        works.push({
          id: work_id.trim(),
          name: work_name.trim(),
          unit: (unit && unit.trim()) ? unit.trim() : null,
          unit_price: (unit_price && unit_price.trim()) ? parseFloat(unit_price.trim()) : null,
          phase_id: (phase_id && phase_id.trim()) ? phase_id.trim() : null,
          stage_id: (stage_id && stage_id.trim()) ? stage_id.trim() : null,
          substage_id: (substage_id && substage_id.trim()) ? substage_id.trim() : null
        });
      }
    }

    console.log(`üèóÔ∏è –§–∞–∑: ${phases.size}, –°—Ç–∞–¥–∏–π: ${stages.size}, –ü–æ–¥—Å—Ç–∞–¥–∏–π: ${substages.size}, –†–∞–±–æ—Ç: ${works.length}`);

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    await query('DELETE FROM work_materials');
    await query('DELETE FROM works_ref');
    await query('DELETE FROM substages');
    await query('DELETE FROM stages');
    await query('DELETE FROM phases');

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∞–∑—ã
    console.log('üìù –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∞–∑—ã...');
    let phasesCount = 0;
    for (const [id, name] of phases) {
      try {
        await query('INSERT INTO phases (id, name, sort_order) VALUES ($1, $2, $3) ON CONFLICT (id) DO NOTHING', 
          [id, name, parseInt(id) || 0]);
        phasesCount++;
        console.log(`   –§–∞–∑–∞: ${id} - ${name}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ñ–∞–∑—ã ${id}:`, error.message);
      }
    }
    console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ —Ñ–∞–∑: ${phasesCount}`);

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏–∏
    console.log('üìù –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏–∏...');
    let stagesCount = 0;
    for (const [id, data] of stages) {
      try {
        await query('INSERT INTO stages (id, name, phase_id, sort_order) VALUES ($1, $2, $3, $4) ON CONFLICT (id) DO NOTHING', 
          [id, data.name, data.phase_id, 0]);
        stagesCount++;
        console.log(`   –°—Ç–∞–¥–∏—è: ${id} - ${data.name} (—Ñ–∞–∑–∞: ${data.phase_id})`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å—Ç–∞–¥–∏–∏ ${id}:`, error.message);
      }
    }
    console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç–∞–¥–∏–π: ${stagesCount}`);

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Å—Ç–∞–¥–∏–∏
    console.log('üìù –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Å—Ç–∞–¥–∏–∏...');
    let substagesCount = 0;
    for (const [id, data] of substages) {
      try {
        await query('INSERT INTO substages (id, name, stage_id, sort_order) VALUES ($1, $2, $3, $4) ON CONFLICT (id) DO NOTHING', 
          [id, data.name, data.stage_id, 0]);
        substagesCount++;
        console.log(`   –ü–æ–¥—Å—Ç–∞–¥–∏—è: ${id} - ${data.name} (—Å—Ç–∞–¥–∏—è: ${data.stage_id})`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–æ–¥—Å—Ç–∞–¥–∏–∏ ${id}:`, error.message);
      }
    }
    console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Å—Ç–∞–¥–∏–π: ${substagesCount}`);

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—ã
    console.log('üìù –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—ã...');
    let imported = 0;
    for (const work of works) {
      try {
        await query(`
          INSERT INTO works_ref (id, name, unit, unit_price, phase_id, stage_id, substage_id, sort_order) 
          VALUES ($1, $2, $3, $4, $5, $6, $7, $8) 
          ON CONFLICT (id) DO UPDATE SET 
            name = EXCLUDED.name,
            unit = EXCLUDED.unit,
            unit_price = EXCLUDED.unit_price,
            phase_id = EXCLUDED.phase_id,
            stage_id = EXCLUDED.stage_id,
            substage_id = EXCLUDED.substage_id
        `, [work.id, work.name, work.unit, work.unit_price, work.phase_id, work.stage_id, work.substage_id, 0]);
        imported++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ä–∞–±–æ—Ç—ã ${work.id}:`, error.message);
      }
    }

    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${imported} —Ä–∞–±–æ—Ç –∏–∑ ${works.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await Promise.all([
      query('SELECT COUNT(*) FROM phases'),
      query('SELECT COUNT(*) FROM stages'),
      query('SELECT COUNT(*) FROM substages'),
      query('SELECT COUNT(*) FROM works_ref')
    ]);

    console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –§–∞–∑—ã: ${stats[0].rows[0].count}`);
    console.log(`   –°—Ç–∞–¥–∏–∏: ${stats[1].rows[0].count}`);
    console.log(`   –ü–æ–¥—Å—Ç–∞–¥–∏–∏: ${stats[2].rows[0].count}`);
    console.log(`   –†–∞–±–æ—Ç—ã: ${stats[3].rows[0].count}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
  } finally {
    process.exit(0);
  }
}

importCSV();